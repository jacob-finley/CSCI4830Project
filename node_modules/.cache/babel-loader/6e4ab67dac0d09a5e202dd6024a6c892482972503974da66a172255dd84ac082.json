{"ast":null,"code":"var _jsxFileName = \"/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js\",\n  _s = $RefreshSig$();\n// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  var _questions$currentQue;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const [showScore, setShowScore] = React.useState(false);\n  // constants for 'points' of different college\n  const [scores, updateScores] = React.useState({\n    collegeARTSCI: 0,\n    collegeBA: 0,\n    collegeEDU: 0,\n    collegeCOM: 0,\n    collegeSCITECH: 0,\n    collegePUBLIC: 0\n  });\n\n  // reads button presses and updates scores as needed.\n  const handleAnswerButtonClick = (scores, index) => {\n    if (index === 0) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI + scores[0],\n        collegeBA: prevScores.collegeBA,\n        collegeEDU: prevScores.collegeEDU,\n        collegeCOM: prevScores.collegeCOM,\n        collegeSCITECH: prevScores.collegeSCITECH,\n        collegePUBLIC: prevScores.collegePUBLIC\n      }));\n    } else if (index === 1) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI,\n        collegeBA: prevScores.collegeBA + scores[1],\n        collegeEDU: prevScores.collegeEDU,\n        collegeCOM: prevScores.collegeCOM,\n        collegeSCITECH: prevScores.collegeSCITECH,\n        collegePUBLIC: prevScores.collegePUBLIC\n      }));\n    } else if (index === 2) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI,\n        collegeBA: prevScores.collegeBA,\n        collegeEDU: prevScores.collegeEDU + scores[2],\n        collegeCOM: prevScores.collegeCOM,\n        collegeSCITECH: prevScores.collegeSCITECH,\n        collegePUBLIC: prevScores.collegePUBLIC\n      }));\n    } else if (index === 3) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI,\n        collegeBA: prevScores.collegeBA,\n        collegeEDU: prevScores.collegeEDU,\n        collegeCOM: prevScores.collegeCOM + scores[3],\n        collegeSCITECH: prevScores.collegeSCITECH,\n        collegePUBLIC: prevScores.collegePUBLIC\n      }));\n    } else if (index === 4) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI,\n        collegeBA: prevScores.collegeBA,\n        collegeEDU: prevScores.collegeEDU,\n        collegeCOM: prevScores.collegeCOM,\n        collegeSCITECH: prevScores.collegeSCITECH + scores[4],\n        collegePUBLIC: prevScores.collegePUBLIC\n      }));\n    } else if (index === 5) {\n      updateScores(prevScores => ({\n        collegeARTSCI: prevScores.collegeARTSCI,\n        collegeBA: prevScores.collegeBA,\n        collegeEDU: prevScores.collegeEDU,\n        collegeCOM: prevScores.collegeCOM,\n        collegeSCITECH: prevScores.collegeSCITECH,\n        collegePUBLIC: prevScores.collegePUBLIC + scores[5]\n      }));\n    }\n    // advances the question if there are more questions in question.js to go through\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      // otherwise goes to the end screen, showScore    \n    } else {\n      setShowScore(true);\n    }\n  };\n\n  // finds the colleges that have the max value and returns them\n  const bestFits = scores => {\n    let maxValue = 0;\n    for (const [key, value] of Object.entries(scores)) {\n      maxValue = Math.max(maxValue, value);\n    }\n    let bestFits = [];\n    for (const [key, value] of Object.entries(scores)) {\n      if (maxValue == value) {\n        bestFits.push(key);\n      }\n    }\n    return bestFits.join(' and ');\n  };\n\n  // the final screen shows all points accumulated for testing purposes.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    \"data-testid\": \"quiz-screen\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-result-container\",\n      \"data-testid\": \"result-screen\",\n      padding: \"80px\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Best Fits: \", [bestFits(scores)]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // handles displaying buttons and the current question. \n    // pulls questions from questions.js\n    _jsxDEV(\"div\", {\n      className: \"question-card\",\n      \"data-testid\": \"question-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-number\",\n          children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestion].questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-container\",\n        children: (_questions$currentQue = questions[currentQuestion].answerOptions) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.map((answerOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerButtonClick(questions[currentQuestion].scores, index),\n          children: answerOption\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"av4mhEbdvQuUHuPOlYbqW8tr4VA=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","questions","jsxDEV","_jsxDEV","Quiz","_s","_questions$currentQue","currentQuestion","setCurrentQuestion","useState","showScore","setShowScore","scores","updateScores","collegeARTSCI","collegeBA","collegeEDU","collegeCOM","collegeSCITECH","collegePUBLIC","handleAnswerButtonClick","index","prevScores","nextQuestion","length","bestFits","maxValue","key","value","Object","entries","Math","max","push","join","className","children","padding","fileName","_jsxFileName","lineNumber","columnNumber","questionText","answerOptions","map","answerOption","onClick","_c","$RefreshReg$"],"sources":["/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js"],"sourcesContent":["// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\n\nfunction Quiz() {\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const [showScore, setShowScore] = React.useState(false);\n    // constants for 'points' of different college\n    const [scores, updateScores] = React.useState({\n        collegeARTSCI: 0,\n        collegeBA: 0,\n        collegeEDU: 0,\n        collegeCOM: 0,\n        collegeSCITECH: 0,\n        collegePUBLIC: 0\n    })\n\n    // reads button presses and updates scores as needed.\n    const handleAnswerButtonClick = (scores, index) => {\n        if (index === 0) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI + scores[0],\n                collegeBA: prevScores.collegeBA,\n                collegeEDU: prevScores.collegeEDU,\n                collegeCOM: prevScores.collegeCOM,\n                collegeSCITECH: prevScores.collegeSCITECH,\n                collegePUBLIC: prevScores.collegePUBLIC\n            }));\n        } else if (index === 1) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI,\n                collegeBA: prevScores.collegeBA  + scores[1],\n                collegeEDU: prevScores.collegeEDU,\n                collegeCOM: prevScores.collegeCOM,\n                collegeSCITECH: prevScores.collegeSCITECH,\n                collegePUBLIC: prevScores.collegePUBLIC\n            }));\n        } else if (index === 2) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI,\n                collegeBA: prevScores.collegeBA,\n                collegeEDU: prevScores.collegeEDU + scores[2],\n                collegeCOM: prevScores.collegeCOM,\n                collegeSCITECH: prevScores.collegeSCITECH,\n                collegePUBLIC: prevScores.collegePUBLIC\n            }));\n        } else if (index === 3) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI,\n                collegeBA: prevScores.collegeBA,\n                collegeEDU: prevScores.collegeEDU,\n                collegeCOM: prevScores.collegeCOM + scores[3],\n                collegeSCITECH: prevScores.collegeSCITECH,\n                collegePUBLIC: prevScores.collegePUBLIC\n            }));\n        } else if (index === 4) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI,\n                collegeBA: prevScores.collegeBA,\n                collegeEDU: prevScores.collegeEDU,\n                collegeCOM: prevScores.collegeCOM,\n                collegeSCITECH: prevScores.collegeSCITECH + scores[4],\n                collegePUBLIC: prevScores.collegePUBLIC\n            }));\n        } else if (index === 5) {\n            updateScores((prevScores) => ({\n                collegeARTSCI: prevScores.collegeARTSCI,\n                collegeBA: prevScores.collegeBA,\n                collegeEDU: prevScores.collegeEDU,\n                collegeCOM: prevScores.collegeCOM,\n                collegeSCITECH: prevScores.collegeSCITECH,\n                collegePUBLIC: prevScores.collegePUBLIC  + scores[5]\n            }));\n        }\n        // advances the question if there are more questions in question.js to go through\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        // otherwise goes to the end screen, showScore    \n        } else {\n            setShowScore(true);\n        }\n    };\n\n    // finds the colleges that have the max value and returns them\n    const bestFits = (scores) => {\n        let maxValue = 0;\n        for (const [key, value] of Object.entries(scores)) {\n            maxValue = Math.max(maxValue, value)\n        }\n        let bestFits = [];\n        for (const [key, value] of Object.entries(scores)) {\n            if (maxValue == value) {\n                bestFits.push(key);\n            }\n        }\n        return bestFits.join(' and ');\n    }\n\n    // the final screen shows all points accumulated for testing purposes.\n    return (\n        <div className=\"question-container\" data-testid=\"quiz-screen\">\n\n            {showScore ? (\n                \n                <div className=\"final-result-container\" data-testid=\"result-screen\" padding=\"80px\">\n                    <h2>Quiz Results</h2>\n                    <h3>Best Fits: {[bestFits(scores)]}</h3>\n                    <br></br>\n                </div>\n\n            ) : (\n                // handles displaying buttons and the current question. \n                // pulls questions from questions.js\n                <div className=\"question-card\" data-testid=\"question-screen\">\n                    <h2><div className=\"question-number\">Question {currentQuestion + 1} of {questions.length}</div></h2>\n                    <h2>{questions[currentQuestion].questionText}</h2>\n                    <div className=\"answer-container\">\n                        {questions[currentQuestion].answerOptions?.map((answerOption, index) => (\n                            <button\n                                key={index}\n                                onClick={() => handleAnswerButtonClick(questions[currentQuestion].scores, index)}\n                            >\n                                {answerOption}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Quiz;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}