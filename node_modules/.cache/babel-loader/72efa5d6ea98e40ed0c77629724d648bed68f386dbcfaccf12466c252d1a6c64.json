{"ast":null,"code":"var _jsxFileName = \"/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js\",\n  _s = $RefreshSig$();\n// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  var _questions$currentQue;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const [showScore, setShowScore] = React.useState(false);\n  // constants for 'points' of different college\n  const scores = {\n    collegeARTSCI: 0,\n    collegeBA: 0,\n    collegeEDU: 0,\n    collegeCOM: 0,\n    collegeSCITECH: 0,\n    collegePUBLIC: 0\n  };\n\n  // reads button presses and updates scores as needed.\n  const handleAnswerButtonClick = (scores, index) => {\n    switch (index) {\n      case 0:\n        scores.collegeARTSCI += scores[0];\n        break;\n      case 1:\n        scores.collegeBA += scores[1];\n        break;\n      case 2:\n        scores.collegeEDU += scores[2];\n        break;\n      case 3:\n        scores.collegeCOM += scores[3];\n        break;\n      case 4:\n        scores.collegeSCITECH += scores[4];\n        break;\n      case 5:\n        scores.collegePUBLIC += scores[5];\n    }\n    console.log(scores.collegeARTSCI);\n    console.log(scores.collegeBA);\n    console.log(scores.collegeEDU);\n    console.log(scores.collegeCOM);\n    console.log(scores.collegeSCITECH);\n    console.log(scores.collegePUBLIC);\n\n    // advances the question if there are more questions in question.js to go through\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      // otherwise goes to the end screen, showScore    \n    } else {\n      setShowScore(true);\n    }\n  };\n\n  // finds the colleges that have the max value and returns them\n  const bestFits = scores => {\n    let maxValue = 0;\n    for (const [key, value] of Object.entries(scores)) {\n      maxValue = Math.max(maxValue, value);\n    }\n    let bestFits = [];\n    for (const [key, value] of Object.entries(scores)) {\n      if (maxValue == value) {\n        bestFits.push(key);\n      }\n    }\n    return bestFits.join(' and ');\n  };\n\n  // the final screen shows all points accumulated for testing purposes.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Best Fits: \", [bestFits(scores)]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // handles displaying buttons and the current question. \n    // pulls questions from questions.js\n    _jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-number\",\n          children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestion].questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-container\",\n        children: (_questions$currentQue = questions[currentQuestion].answerOptions) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.map((answerOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerButtonClick(questions[currentQuestion].scores, index),\n          children: [answerOption, \" \", index]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"tOK6IUKauO1GlLWsxHot8lW25Ss=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","questions","jsxDEV","_jsxDEV","Quiz","_s","_questions$currentQue","currentQuestion","setCurrentQuestion","useState","showScore","setShowScore","scores","collegeARTSCI","collegeBA","collegeEDU","collegeCOM","collegeSCITECH","collegePUBLIC","handleAnswerButtonClick","index","console","log","nextQuestion","length","bestFits","maxValue","key","value","Object","entries","Math","max","push","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","questionText","answerOptions","map","answerOption","onClick","_c","$RefreshReg$"],"sources":["/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js"],"sourcesContent":["// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\n\nfunction Quiz() {\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const [showScore, setShowScore] = React.useState(false);\n    // constants for 'points' of different college\n    const scores = {\n        collegeARTSCI: 0,\n        collegeBA: 0,\n        collegeEDU: 0,\n        collegeCOM: 0,\n        collegeSCITECH: 0,\n        collegePUBLIC: 0,\n    };\n\n    // reads button presses and updates scores as needed.\n    const handleAnswerButtonClick = (scores, index) => {\n        switch(index) {\n            case 0:\n                scores.collegeARTSCI += scores[0];\n                break;\n            case 1:\n                scores.collegeBA += scores[1];\n                break;\n            case 2:\n                scores.collegeEDU += scores[2];\n                break;\n            case 3:\n                scores.collegeCOM += scores[3];\n                break;\n            case 4:\n                scores.collegeSCITECH += scores[4];\n                break;\n            case 5:\n                scores.collegePUBLIC += scores [5];\n        }\n        console.log(scores.collegeARTSCI);\n        console.log(scores.collegeBA);\n        console.log(scores.collegeEDU);\n        console.log(scores.collegeCOM);\n        console.log(scores.collegeSCITECH);\n        console.log(scores.collegePUBLIC);\n\n        // advances the question if there are more questions in question.js to go through\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        // otherwise goes to the end screen, showScore    \n        } else {\n            setShowScore(true);\n        }\n    };\n\n    // finds the colleges that have the max value and returns them\n    const bestFits = (scores) => {\n        let maxValue = 0;\n        for (const [key, value] of Object.entries(scores)) {\n            maxValue = Math.max(maxValue, value)\n        }\n        let bestFits = [];\n        for (const [key, value] of Object.entries(scores)) {\n            if (maxValue == value) {\n                bestFits.push(key);\n            }\n        }\n        return bestFits.join(' and ');\n    }\n\n    // the final screen shows all points accumulated for testing purposes.\n    return (\n        <div className=\"question-container\">\n\n            {showScore ? (\n                \n                <div className=\"final-result-container\">\n                    <h2>Quiz Results</h2>\n                    <h3>Best Fits: {[bestFits(scores)]}</h3>\n                    <br></br>\n                </div>\n\n            ) : (\n                // handles displaying buttons and the current question. \n                // pulls questions from questions.js\n                <div className=\"question-card\">\n                    <h2><div className=\"question-number\">Question {currentQuestion + 1} of {questions.length}</div></h2>\n                    <h2>{questions[currentQuestion].questionText}</h2>\n                    <div className=\"answer-container\">\n                        {questions[currentQuestion].answerOptions?.map((answerOption, index) => (\n                            <button\n                                key={index}\n                                onClick={() => handleAnswerButtonClick(questions[currentQuestion].scores, index)}\n                            >\n                                {answerOption} {index}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default Quiz;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}