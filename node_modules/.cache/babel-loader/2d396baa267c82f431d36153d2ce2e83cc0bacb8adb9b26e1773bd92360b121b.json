{"ast":null,"code":"var _jsxFileName = \"/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js\",\n  _s = $RefreshSig$();\n// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const [showScore, setShowScore] = React.useState(false);\n  // constants for 'points' of different college\n  const [scores, setScores] = React.useState({\n    collegeARTSCI: 0,\n    collegeBA: 0,\n    collegeEDU: 0,\n    collegeCOM: 0,\n    collegeSCITECH: 0,\n    collegePUBLIC: 0\n  });\n\n  // reads button presses and updates scores as needed.\n  const handleAnswerButtonClick = scores => {\n    setScores(prevScores => ({\n      collegeARTSCI: prevScores.collegeARTSCI + scores.collegeARTSCI,\n      collegeBA: prevScores.collegeBA + scores.collegeBA,\n      collegeEDU: prevScores.collegeEDU + scores.collegeEDU,\n      collegeCOM: prevScores.collegeCOM + scores.collegeCOM,\n      collegeSCITECH: prevScores.collegeSCITECH + scores.collegeSCITECH,\n      collegePUBLIC: prevScores.collegePUBLIC + scores.collegePUBLIC\n    }));\n    // advances the question if there are more questions in question.js to go through\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      // otherwise goes to the end screen, showScore    \n    } else {\n      setShowScore(true);\n    }\n  };\n\n  // finds the colleges that have the max value and returns them\n  const bestFits = scores => {\n    let maxValue = 0;\n    for (const [key, value] of Object.entries(scores)) {\n      maxValue = Math.max(maxValue, value);\n    }\n    let bestFits = [];\n    for (const [key, value] of Object.entries(scores)) {\n      if (maxValue == value) {\n        bestFits.push(key);\n      }\n    }\n    return bestFits.join(' and ');\n  };\n\n  // the final screen shows all points accumulated for testing purposes.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Best Fits: \", [bestFits(scores)]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // handles displaying buttons and the current question. \n    // pulls questions from questions.js\n    _jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-number\",\n          children: [\"Question \", currentQuestion + 1, \" of  \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestion].questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-container\",\n        children: questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerButtonClick(answerOption.scores),\n          children: [answerOption.answerText, index]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"Ys+pW/qTYpTbW43Gr6Bn0JqmVNM=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","questions","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","useState","showScore","setShowScore","scores","setScores","collegeARTSCI","collegeBA","collegeEDU","collegeCOM","collegeSCITECH","collegePUBLIC","handleAnswerButtonClick","prevScores","nextQuestion","length","bestFits","maxValue","key","value","Object","entries","Math","max","push","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","questionText","answerOptions","map","answerOption","index","onClick","answerText","_c","$RefreshReg$"],"sources":["/Users/jacobfinley/Documents/classes/Intro to Soft Eng/Project/CSCI4830Project/src/quiz.js"],"sourcesContent":["// this file contains core backend functionality\nimport React from 'react';\nimport questions from './questions';\n\nfunction Quiz() {\n    const [currentQuestion, setCurrentQuestion] = React.useState(0);\n    const [showScore, setShowScore] = React.useState(false);\n    // constants for 'points' of different college\n    const [scores, setScores] = React.useState({\n        collegeARTSCI: 0,\n        collegeBA: 0,\n        collegeEDU: 0,\n        collegeCOM: 0,\n        collegeSCITECH: 0,\n        collegePUBLIC: 0,\n    });\n\n    // reads button presses and updates scores as needed.\n    const handleAnswerButtonClick = (scores) => {\n        setScores((prevScores) => ({\n\n            collegeARTSCI: prevScores.collegeARTSCI + scores.collegeARTSCI,\n            collegeBA: prevScores.collegeBA + scores.collegeBA,\n            collegeEDU: prevScores.collegeEDU + scores.collegeEDU,\n            collegeCOM: prevScores.collegeCOM + scores.collegeCOM,\n            collegeSCITECH: prevScores.collegeSCITECH + scores.collegeSCITECH,\n            collegePUBLIC: prevScores.collegePUBLIC + scores.collegePUBLIC,\n\n\n        }));\n        // advances the question if there are more questions in question.js to go through\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        // otherwise goes to the end screen, showScore    \n        } else {\n            setShowScore(true);\n        }\n    };\n\n    // finds the colleges that have the max value and returns them\n    const bestFits = (scores) => {\n        let maxValue = 0;\n        for (const [key, value] of Object.entries(scores)) {\n            maxValue = Math.max(maxValue, value)\n        }\n        let bestFits = [];\n        for (const [key, value] of Object.entries(scores)) {\n            if (maxValue == value) {\n                bestFits.push(key);\n            }\n        }\n        return bestFits.join(' and ');\n    }\n\n    // the final screen shows all points accumulated for testing purposes.\n    return (\n        <div className=\"question-container\">\n\n            {showScore ? (\n                \n                <div className=\"final-result-container\">\n                    <h2>Quiz Results</h2>\n                    <h3>Best Fits: {[bestFits(scores)]}</h3>\n                    <br></br>\n                </div>\n\n            ) : (\n                // handles displaying buttons and the current question. \n                // pulls questions from questions.js\n                <div className=\"question-card\">\n                    <h2><div className=\"question-number\">Question {currentQuestion + 1} of  {questions.length}</div></h2>\n                    <h2>{questions[currentQuestion].questionText}</h2>\n                    <div className=\"answer-container\">\n                    {questions[currentQuestion].answerOptions.map((answerOption, index) => (\n                        <button\n                            key={index}\n                            onClick={() => handleAnswerButtonClick(answerOption.scores)}\n                        >\n                            {answerOption.answerText}{index}\n                        </button>\n                    ))}\n                    </div>\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default Quiz;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}